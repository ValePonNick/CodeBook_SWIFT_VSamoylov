import UIKit


// ЗАДАЧА: напиши функцию, которая имитирует остановку на определенной станции метро, используя цикл 'while'. Функция должна принимать массив названий станций и номер станции, на которой нужно остановиться.
func stopAtStation(stations: [String], targetStationNumber: Int) -> String {
    var currentStation = 0

    while currentStation < stations.count { // стобы ИЗБЕЖАТЬ выхода за пределы массива
        currentStation += 1
        if currentStation == targetStationNumber {
            return stations[currentStation - 1]
        }
    }
    return "Проехали!!!"
}

let metroStations = ["Юго-Западная", "Театральная", "Спортивная", "Университет", "Войковская", "Речной вокзал", "Библиотека", "Фрунзенская"]
let numberStation = 5
print(stopAtStation(stations: metroStations, targetStationNumber: numberStation)) // Войковская
/*
 COMMENTS:
 Почему вычитаем 1?
 1. Когда используем цикл, чтобы найти определённый элемент в массиве, мы увеличиваем счётчик (`currentStation`) на 1 в каждой итерации.
 2. Когда `currentStation` становится равным номеру станции, которую мы ищем (`index`), нам нужно вернуть элемент массива, соответствующий этому номеру.
 3. Однако, поскольку индексы начинаются с 0, а не с 1, нам нужно вычесть 1 из `currentStation`, чтобы получить правильный индекс в массиве. Напр.:
     •    Если хотим найти третью станцию, то `currentStation` будет равно 3. Но в массиве третья станция находится под индексом 2 (потому что индексация начинается с 0).
 4. Перевод `targetStationNumber`:
 •    Номер целевой станции
 •    Номер станции назначения
 •    Целевой номер станции */

// Задача 1: Книжная библиотека
/* Напиши функцию, которая должна принимать массив названий книг и номер книги, которую нужно выдать. Используя цикл `while`, найдите и выдайте книгу по номеру. Если книги с таким номером нет, выведите сообщение “Книга не найдена”. */
// вар. 1
func findBook(bookTitles: [String], targetBookNumber: Int) -> String {
    var currentBookNumber = 0 // создали константу для хранения желаемой книги
    while currentBookNumber < bookTitles.count {
        currentBookNumber += 1
        if currentBookNumber == targetBookNumber {
            return bookTitles[currentBookNumber - 1]
        }
    }
    return "Книга не найдена"
}
// пример
let bookTitlesInLibrary = ["Hobbit", "Думай как математик", "Изучаем Swift", "Грокаем алгоритмы", "ИППУ", "Международное право", "The Lord of the Rings", "Sinderella"]
print(findBook(bookTitles: bookTitlesInLibrary, targetBookNumber: 2)) // Думай как математик
// вар. 2
func findBooks(bookTitles: [String], targetTitleBook: Int) -> String {
    if targetTitleBook < 1 || targetTitleBook > bookTitles.count {
        return "Недопустимый номер книги"
    }
    return bookTitles[targetTitleBook - 1]
}
print(findBook(bookTitles: bookTitlesInLibrary, targetBookNumber: 1)) // Hobbit
// COMMENTS:
/* 1. Этот вариант эффективен + прост, т.к. СРАЗУ проверяет валидность номера книги и возвращает результат без использования цикла.
   2. Циклы (`while`, `for`) используются, когда необходимо выполнить какие-то действия над КАЖДЫМ элементом коллекции, или когда нужно найти элемент по УСЛОВИЮ, которое НЕ СВЯЗАНО напрямую с ИНДЕКСОМ.
    3. если номер книги известен заранее, прямой доступ по индексу — лучший выбор.
    4. Если же нужно найти книгу по другому критерию (напр., по НАЗВАНИЮ), цикл м.б. > ПОДХОДЯЩИМ. */

// Задача 2: Дорога
/* Напишите программу, которая имитирует движение по дороге. Используя цикл `while`, выводите сообщения о пройденных километрах до тех пор, пока не будет достигнута определённая дистанция (например, 100 км). */

// Задача 3: Музыкальный плейлист
 
/* Напишите функцию, которая проигрывает музыкальный плейлист. Функция должна принимать массив названий песен и проигрывать их по порядку, используя цикл `while`. Если плейлист закончился, выведите сообщение “Плейлист завершён”. */
